mean(difference)
s<-sd(difference)
mn+c(-1,1)*qt(0.975,9)*s/sqrt(n)
mn+c(-1,1)*qt(0.975,9)*s/sqrt(10)
t.test(difference)$conf.int
sp<-7*132.86^2+20*127.44^2
sp <- 7*15.34^2 + 20*18.23^2
ns<-7+20
sp/ns
sp<-sqrt(sp/ns)
132.86-127.44+c(-1,1)*qt(0.95,27)*sp*sqrt(1/8+1/21)
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
sp<-sqrt((9*var(g1)^2+9*var(g2)^2)/(18))
sp <- sqrt((9*var(g1)+9*var(g2))/18)
md+c(-1,1)*qt(0.975,18)*sp
md + c(-1,1)*qt(.975,18)*sp*sqrt(1/5)
t.test(g2,g1,paired = FALSE,var.equal = TRUE)$conf
t.test(g2,g1,paired = TRUE)$conf
num<-15.34^2/8+18.23^2/21
num <- (15.34^2/8 + 18.23^2/21)^2
den<-(15.34^2/8^4/3)+(18.23^2/21^4/22)
den <- 15.34^4/8^2/7 + 18.23^4/21^2/20
mydf<-num/den
132.86-127.44+c(-1,1)*qt(0.975,mydf)*(15.34^2/8+18.23^2/21)
132.86-127.44 +c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
library(swirl)
swirl()
1
(32-30)/1
(32-30)/(10/4)
15
qt(.95,15)
dim(fs)
t.test(fs$sheight-fs$fheight)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
8
pt(2.5,15)
pt(2.5,15,lower.tail = FALSE)
qnorm(.95)
qnorm(.99)
pnorm(2)
pnorm(2,lower.tail = FALSE)
mybin
pbinom(6,size = 8,prob = .5,lower.tail = FALSE)
pbinom(7,size = 8,prob = 0.5,lower.tail = TRUE)
ppois(9,5,lower.tail = FALSE)
1100+c(-1,1)*qt(0.95,8)*30/3
qt(0.95,8)
1.8595/3
2-0.6198
2/0.6198
c(-1,1)*qt(0.95,8)/3
2/0.6198
0.6^2*9+0.68^2*9
7.4/18
sqrt(0.411)
-2+c(-1,1)*qt(.95,9)*.641
qnorm(.95)
pnorm(.9)
pnorm(.95)
dnorm(0.95)
qnorm(0.975)
?qt
qnorm(0.05)
pnorm(0.95)
qnorm(0.95)
rnorm(0.95)
dnorm(0.95)
pnorm(0.975)
1100+c(-1,1)*qt(0.975,4)*(30/sqrt(5))
se <- sqrt((1.5^2*8+1.8^2*8)/16 * (1/9 +1/9))
z <- (-3+1) / se
pvalue <- pnorm(z) * 2
pvalue
0.01+c(-1,1)*qt((1-0.05/2)*0.04/100)
0.05/2
1-0.05/2
0.01+c(-1,1)*qt(0.975)*0.04/100)
0.01+c(-1,1)*qt(0.975)*0.04/100
0.01+c(-1,1)*qt(0.975,99)*0.04/sqrt(100)
power.t.test(delta=0.01,sd=0.04,type=one.sample,alternative = one.sided,power = 0.9)$n
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
?runif
hist(runif(1000))
tmp<-runif(1000)
head(tmp)
class(tmp)
str(tmp)
str(mns)
summary(tmp)
summary(mns)
sd(tmp)
sd(mns)
0.28/0.44
library(swirl)
install_from_swirl("Regression Models")
swirl()
plot(child~parent,galton)
plot(jitter(child,4)~parent,galton)
regrline<-lm(child~parent,galton)
abline(regrline,lwd=3,col='red')
summary(regrline)
fit<-lm(child~parent,galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals,galton$parent)
ols<-fit$coef[1]
ols.ic<-fit$coef[1]
ols.slope<-fit$coef[2]
lhs-rhs
all.qual(lhs,rhs)
info()
all.equal(lhs,rhs)
varChild<-var(child)
varChild<-var(galton$child)
varRes<-var(fit$residuals)
varEst<-est(ols.slope.ols.ic)
?est
skip()
all.equal(varChild,varRes+varEst)
efit<-lm(accel~mag+dist,attenu)
mean(efit$residuals)
cov(efit$residuals,attenu$mag)
cov(efit$residuals,attenu$dist)
cor(gpa_nor,gch_nor)
l_nor<-lm(gch_nor~gpa_nor)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(w*x)/sum(w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm<-(y~x)
rm(lm)
tmp<-lm(y~x)
tmp
xc<-x-mean(x)
yc<-y-mean(y)
lm(yc~xc)
dataset(mgcars)
dataset(mtcars)
uses(mtcars)
library(datasets)
uses(mtcars)
uses(mtcars)
requires(mtcars)
mgcars
mtcars
x<-mtcars$wt
y<-mtcars$mpg
lm(y~x)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
xn<-(x-mean(x))/sd(x)
xn
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
library(swirl)
swirl()
fit<-lm(child~parent,data=galton)
sum((fit$residuals)^2))/(n-2)
skip()
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu<-mean(galton$child)
sTot<-sum((galton$child-mu)^2)
sRes<-deviance(fit)
1-(sRes/sTot)
1-sRes-sTot
1-sRes/sTot
summary(fit)$r.squared
skip()
skip()
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child~1,galton)
View(trees)
fit<-lm(Volume~Girth+Height+Constant-1,trees)
trees2<-eliminate("Girth",trees)
View(trees2)
fit2<-lm(Volume~Height+Constant-1,trees2)
lapply(list(fit,fit2),coef)
library(swirl)
swirl()
all<-lm(Fertility~.,data=swiss)
summary(all)
lm(Fertility~Agriculture,data=swiss)
summary(lm(Fertility ~ Agriculture, swiss))
cor(Examination,Education)
skip()
cor(swiss$Agriculture,swiss$Education)
makelms()
ec<-swiss$Examination+swiss$Catholic
lm(.+ec~Fertility,data=swiss)
skip()
summary(all)$coef - summary(efit)$coef
all$coefficients-efit$coefficients
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y~x)
fit<-lm(y~x)
summary(fit)
library(datasets)
uses(mtcars)
uses(mtcars)
require(mtcars)
use(mtcars)
head(mtcars)
fit<-lm(mpg~I(weight -mean(weight)),mtcars)
fit<-lm(mpg~I(wt -mean(wt)),mtcars)
summary(fit)
predict(fit, newdata=mean(wt),internal="confidence")
predict(fit, newdata=mean(mtcars$wt),internal="confidence")
newx<-mean(mtcars$wt)
predict(fit, newdata=newx,internal="confidence")
library(swirl)
swirl()
6
dim(InsectSprays)
head(InsectSprays)
head(InsectSprays,15)
sA
summary(InsectSprays[,2])
sapply(InsectSprays,InsectSprays$spray,summary)
sapply(summary, InsectSprays$spray,InsectSprays)
skip()
fit<-lm(count~spray)
fit<-lm(count~spray,InsectSprays)
summary(fit)$coef
est<-summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit<-lm(count~spray -1 , InsectSprays)
summary(nfit)$coef
spary2<-relevel(InsectSprays$spray,"C")
spray2<-relevel(InsectSprays$spray,"C")
fit2<-lm(count~spray,spray2)
skip()
summary(fit2)$coef
mean(sC)
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
head(hunger)
names(hunger)
fit<-lm(Numeric~X + Year,hunger)
fit<-lm(hunger$Numeric~hunger$Year)
summary(fit)$coef
lmF<-lm(hunger$Numeric[hunger$Sex=="Female"]~hunger$Year[hunger$Sex=="Female"])
lmM<-lm(hunger$Numeric[hunger$Sex=="Male"]~hunger$Year[hunger$Sex=="Male"])
lmB<-fit(hunger$Numeric~hunger$Year)
lmB<-lm(hunger$Numeric~hunger$Year+hunger$Sex)
lmBoth <- lm(hunger$Numeric ~ hunger$Year + hunger$Sex)
summary(lmBoth)$coef
summary(lmBoth)
lmInter<-lm(Numeric~Year+Sex+Sex*Year,hunger)
summary(lmInter)
fit<-lm(y~x,out2)
plot(fit,which=1)
fitno<-lm(y~x,out2[-1,])
plot(fitno,which=1)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno<- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
skip()
skip()
head(cbind(rstd, rstandard(fit)))
plot(fit,which=3)
plot(fit,which=2)
skip()
skip()
head(rstudent(fit))
dy<-predict(fitno,out2)-predict(fit,out2)
skip()
plot(fit,which=5)
library(datasets)
mtcars
str(mtcars)
mtc2<-mtcars
mtc2$cyl<-as.factor(mtc2$cyl)
fit<-lm(mpg~cyl+wt,mtc2)
summary(fit)$coef
fit2<-mpg~cyl+wt.mtcars)
fit2<-lm(mpg~cyl+wt.mtcars)
fit2<-lm(mpg~cyl+wt,mtcars)
summary(fit2)$coef
fitunadj<-lm(mpg~cyl,mtc2)
summary(fitunadj)$coef
rm(fit2)
fitprod<-lm(mpg~cyl+wt+wt*cyl,mtc2)
summary(fitprod)
summary(fit)$coef
summary(fitprod)$coef
rm(fitprod)
fitprod<-lm(mpg~cyl*wt,mtc2)
summary(fitprod)$coef
?anova
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fitxy<-lm(y~x)
hatvalues(fitxy)
dfbeta(fitxy)
dfbetas(fitxy)
library(swirl)
swirl()
rgp1()
rgp2()
head(swiss)
mdl<-lm(Fertility~Agriculture+Examination+Education+Catholic+Infant.Mortality,swiss)
vif(mdl)
mdl2<-lm(Fertility~Agriculture+Education+Catholic+Infant.Mortality,swiss)
vif(mdl2)
skip()
apply(x1c,1,mean)
skip()
skip()
anova(fit1,fit3)
skip()
d<-deviance(fit3)/43
skip()
n/d
pf(n/d,2,43,lower.tail = FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
library(swirl)
swirl()
ravenData
mdl<-glm(ravenWinNum~ravenScore,family=binomial,ravenData)
lodds<-predict(mdl,data.frame(ravenScore=c(0,3,6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95,1)
var(rpois(1000,50))
nxt()
head(hits)
class(hits$date)
as.integer(head(hits$date))
mdl<-glm(visits~date,poisson,hits)
summary(mdl)
exp(confint(mdl,'date'))
which.max(hits[,'visits'])
hits[704,]
lamda<-mdl$fitted.values[704]
lambda<-mdl$fitted.values[704]
qpois(.95,lambda)
skip()
qpois(.95,mdl2$fitted.values[704])
library(MASS)
shuttle
head(shuttle)
glm(shuttle$use~shuttle$wind,family = binomial)
exp(-0.03181)
shuttle2<-shuttle
shuttle2$use2<-as.numeric(shuttle2$use=='auto')
#shuttle2$wind2<-as.numeric(shuttle2$wind=='head')
#head(shuttle2)
fit<-glm(use2 ~ factor(wind) - 1, family = binomial, data = shuttle2)
summary(fit)
library(datasets)
head(InsectSprays)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots<-c(0)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
table(segmentationOriginal$Case)
?segmentationOriginal
training<-segmentationOriginal[segmentationOriginal$Case=="Train",]
set.seed(125)
fit<-train(Class~.,method="rpart",data=segmentationOriginal)
install.packages('e1071', dependencies=TRUE)
fit<-train(Class~.,method="rpart",data=segmentationOriginal)
fit$finalModel
TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2
TotalIntench2 = 23000; FiberWidthCh1 = 10; PerimStatusCh1=2
test1<-data.frame(TotalIntench2,FiberWidthCh1,PerimStatusCh1=2)
predict(fit,new=test1)
class(test1)
predict(fit$finalModel,new=test1)
library(rpart.plot)
fancyRpartPlot(fit$finalModel)
install.packages("rpart.plot")
library(rpart.plot)
fancyRpartPlot(fit$finalModel)
library(ggplot2)
library(rattle)
install.packages("rattle")
fancyRpartPlot(fit$finalModel)
library(rattle)
install.packages("RGtk2")
install.packages('caret', dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
install.packages('caret', dependencies = TRUE)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rattle)
install.packages("rattle")
install.packages("RGtk2Extras")
library(rattle)
trainSet <- segmentationOriginal[segmentationOriginal$Case =="Train",]
testSet <- segmentationOriginal[segmentationOriginal$Case =="Test",]
set.seed(125)
model_rpart <- train(Class~.,data=trainSet,method="rpart")
fancyRpartPlot(model_rpart$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
t(colMeans(olive))
olive_rpart <- train(Area~.,data=olive,method="rpart")
newdata = as.data.frame(t(colMeans(olive)))
predict(olive_rpart,newdata=newdata)
mean(olive$Area)
rm(list=ls())
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train
head(vowel.train)
vowel.train$y<-as.factor(vowel.train)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
set.seed( 33833)
rftr<-train(y~.,method="rf",data=vowel.train)
library(caret)
rftr<-train(y~.,method="rf",data=vowel.train)
gbmtr<-train(y~.,method="gbm",data=vowel.train,verbose=FALSE)
confusionMatrix(rftr,gbmtr)
?confusionMatrix
confusionMatrix(vowel.train,rftr,gbmtr)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
rm=list(ls())
rm(list=ls())
et.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(elasticnet)
install.packages("elasticnet")
set.seed(233)
mod_lasso <- train(CompressiveStrength ~ ., data = training, method = "lasso")
library(elasticnet)
plot.enet(mod_lasso$finalModel, xvar = "penalty", use.color = TRUE)
install.packages("forecast")
x<=X+1
x <<- x + 1
y <<- 0
x<-0
library(shiny)
runApp(display.mode = "showcase")
setwd("C:/Users/User/Coursera/Shiny")
runApp(display.mode = "showcase")
install.packages("miniUI")
runGadget(ui,server)
source('C:/Users/User/Coursera/Shiny/myFirstGadget.R')
source('C:/Users/User/Coursera/Shiny/myFirstGadget.R')
View(myFirstGadget)
myFirstGadget()
myFirstGadget()
runApp()
install.packages("UsingR")
runApp()
